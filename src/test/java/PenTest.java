import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.PrintStream;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.testng.AssertJUnit.assertEquals;

public class PenTest {
    private Pen pen;
    private final PrintStream originalOut = System.out;
    private PrintStream mockOut;

    @DataProvider(name = "Pen_createObjWithInkValidArgs")
    public Object[][] providePen_createObjWithInkValidArgs() {
        return new Object[][]{
                {1},
                {0},
                {10},
                {Integer.MAX_VALUE}
        };
    }

    @Test(dataProvider = "Pen_createObjWithInkValidArgs", groups = "constructor1")
    public void testPenPen_createObjWithInkValidArgs(int inkCV) throws Exception {
        pen = new Pen(inkCV);
    }

    @DataProvider(name = "Pen_createObjWithInkInvalidArgs")
    public Object[][] providePen_createObjWithInkInvalidArgs() {
        return new Object[][]{
                {-1},
                {-19},
                {Integer.MIN_VALUE}
        };
    }

    @Test(dataProvider = "Pen_createObjWithInkInvalidArgs", groups = "constructor1", expectedExceptions = IllegalArgumentException.class)
    public void testPenPen_createObjWithInkInvalidArgs(int inkCV) throws Exception {
        pen = new Pen(inkCV);
    }

    @DataProvider(name = "Pen_createObjWithSizeLetterValidArgs")
    public Object[][] providePen_createObjWithSizeLetterValidArgs() {
        return new Object[][]{
                {1, 3},
                {2, 0.01},
                {0, 10},
        };
    }

    @Test(dataProvider = "Pen_createObjWithSizeLetterValidArgs", groups = "constructor2", dependsOnGroups = "constructor1")
    public void testPenPen_createObjWithSizeLetterValidArgs(int inkCV, double sl) throws Exception {
        pen = new Pen(inkCV, sl);
    }

    @DataProvider(name = "Pen_createObjWithSizeLetterInvalidArgs")
    public Object[][] providePen_createObjWithSizeLetterInvalidArgs() {
        return new Object[][]{
                {2, -3},
                {2, 0},
                {4, Double.NaN},
                {5, Double.POSITIVE_INFINITY},
                {1, Double.NEGATIVE_INFINITY}

        };
    }

    @Test(dataProvider = "Pen_createObjWithSizeLetterInvalidArgs", groups = "constructor2", dependsOnGroups = "constructor1", expectedExceptions = IllegalArgumentException.class)
    public void testPenPen_createObjWithSizeLetterInvalidArgs(int inkCV, double sl) throws Exception {
        pen = new Pen(inkCV, sl);
    }

    @DataProvider(name = "Pen_createObjWithColorValidArgs")
    public Object[][] providePen_createObjWithColorValidArgs() {
        return new Object[][]{
                {1, 1, "RED"},
                {2, 0.01, "BLUE"},
                {0, 5, "GREEN"}
        };
    }

    @Test(dataProvider = "Pen_createObjWithColorValidArgs", groups = "constructor3", dependsOnGroups = "constructor2")
    public void testPenPen_createObjWithColorValidArgs(int inkCV, double sl, String color) throws Exception {
        pen = new Pen(inkCV, sl, color);
    }

    @DataProvider(name = "Pen_createObjWithColorInvalidArgs")
    public Object[][] providePen_createObjWithColorInvalidArgs() {
        return new Object[][]{
                {2, 0, null}
        };
    }

    @Test(dataProvider = "Pen_createObjWithColorInvalidArgs", groups = "constructor3", dependsOnGroups = "constructor2", expectedExceptions = IllegalArgumentException.class)
    public void testPenPen_createObjWithColorInvalidArgs(int inkCV, double sl, String color) throws Exception {
        pen = new Pen(inkCV, sl, color);
    }


    @DataProvider(name = "write_writeWord")
    public Object[][] provideWrite_writeWord() {
        return new Object[][]{
                {4, 1, "RED", "word"},
                {24, 3, "RED", "can"},
                {8, 2, "BLUE", "card"},
                {Integer.MAX_VALUE, 6, "YELLOW", "some"}
        };
    }

    @Test(dataProvider = "write_writeWord", dependsOnMethods = {"testPenIsWork_checkInk"})
    public void testPenWrite_writeWord(int inkCV, double sl, String color, String word) {
        pen = new Pen(inkCV, sl, color);
        assertEquals("Error", word, pen.write(word));
    }

    @DataProvider(name = "write_writePartOfWord")
    public Object[][] provideWrite_writePartOfWord() {
        return new Object[][]{
                {3, 1, "RED", "word", "wor"},
                {1, 3, "RED", "can", ""},
                {2, 2, "BLUE", "card", "c"},
                {2, 2, "BLUE", "sun", "s"},
                {5, 2, "YELLOW", "cat", "ca"}
        };
    }

    @Test(dataProvider = "write_writePartOfWord", dependsOnMethods = {"testPenIsWork_checkInk"})
    public void testPenWrite_writePartOfWord(int inkCV, double sl, String color, String word, String res) {
        pen = new Pen(inkCV, sl, color);
        assertEquals("Error", res, pen.write(word));
    }

    @DataProvider(name = "write_penNotWorking")
    public Object[][] provideWrite_penNotWorking() {
        return new Object[][]{
                {-2, "word"},
                {-6, "can"},
                {0, "card"}
        };
    }

    @Test(dataProvider = "write_penNotWorking", dependsOnMethods = {"testPenIsWork_checkInk"})
    public void testPenWrite_penNotWorking(int inkCV, String word) {
        pen = new Pen(inkCV);
        assertEquals("Error", "", pen.write(word));
    }

    @DataProvider(name = "write_InvalidArgs")
    public Object[][] provideWrite_InvalidArgs() {
        return new Object[][]{
                {2, null},
        };
    }

    @Test(dataProvider = "write_InvalidArgs", dependsOnMethods = {"testPenIsWork_checkInk"}, expectedExceptions = IllegalArgumentException.class)
    public void testPenWrite_InvalidArgs(int inkCV, String word) throws Exception {
        pen = new Pen(inkCV);
        pen.write(word);
    }

    @DataProvider(name = "getColor_retColor")
    public Object[][] provideGetColor_retColor() {
        return new Object[][]{
                {1, 1, "RED"},
                {2, 3, "RED"},
                {-2, 2, "BLUE"}
        };
    }

    @Test(dataProvider = "getColor_retColor", dependsOnGroups = "constructor3")
    public void testPenGetColor_retColor(int inkCV, double sl, String color) {
        pen = new Pen(inkCV, sl, color);
        assertEquals("Error", color, pen.getColor());
    }

    @DataProvider(name = "doSmthElse_printColor")
    public Object[][] provideDoSmthElse_printColor() {
        return new Object[][]{
                {1, 1, "RED"},
                {2, 3, "RED"},
                {-2, 2, "BLUE"}
        };
    }

    @BeforeMethod(groups = "outPut")
    public void setUpStreams() {
        mockOut = mock(PrintStream.class);
        System.setOut(mockOut);
    }

    @AfterMethod(groups = "outPut")
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    @Test(dataProvider = "doSmthElse_printColor", groups = "outPut", dependsOnGroups = "constructor3")
    public void testPenDoSmthElse_printColor(int inkCV, double sl, String color) {
        pen = new Pen(inkCV, sl, color);
        pen.doSomethingElse();
        verify(mockOut).println(color);
    }

    @DataProvider(name = "isWork_checkInk")
    public Object[][] provideIsWork_checkInk() {
        return new Object[][]{
                {1, true},
                {2, true},
                {-2, false}
        };
    }

    @Test(dataProvider = "isWork_checkInk", dependsOnGroups = "constructor1")
    public void testPenIsWork_checkInk(int inkCV, boolean res) {
        pen = new Pen(inkCV);
        assertEquals("Error", res, (boolean) pen.isWork());
    }
}
