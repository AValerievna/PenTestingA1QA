import org.apache.maven.surefire.shade.org.apache.commons.io.output.ByteArrayOutputStream;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.PrintStream;

import static org.testng.AssertJUnit.assertEquals;

public class PenTest {
    private Pen pen;
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    //constructor1
    @DataProvider(name = "Pen_createObjWithInk")
    public Object[][] providePen_createObjWithInk() {
        return new Object[][] {
                {1},
                {2},
                {-2}
        };
    }

    @Test(dataProvider = "Pen_createObjWithInk")
    public void testPenPen_createObjWithInk(int inkCV) {
        pen = new Pen(inkCV);
        //assertEquals("Success", res, pen);
    }


    //constructor2
    @DataProvider(name = "Pen_createObjWithSizeLetter")
    public Object[][] providePen_createObjWithSizeLetter() {
        return new Object[][] {
                {1,3},
                {2,3},
                {-2,3}
        };
    }

    @Test(dataProvider = "Pen_createObjWithSizeLetter")
    public void testPenPen_createObjWithSizeLetter(int inkCV, double sl) {
        pen = new Pen(inkCV,sl);
        //assertEquals("Success", res, pen);
    }

    //constructor3
    @DataProvider(name = "Pen_createObjWithColor")
    public Object[][] providePen_createObjWithColor() {
        return new Object[][] {
                {1,3, "RED"},
                {2,3,"BLUE"},
                {-2,3,null}
        };
    }

    @Test(dataProvider = "Pen_createObjWithColor")
    public void testPenPen_createObjWithColor(int inkCV, double sl, String color) {
        pen = new Pen(inkCV,sl,color);
        //assertEquals("Success", res, pen);
    }


    //write
    @DataProvider(name = "write_writeWord")
    public Object[][] provideWrite_writeWord() {
        return new Object[][] {
                {10, 1, "RED","word"},
                {24,3,"RED", "can"},
                {20, 2,"BLUE","card"}
        };
    }

    @Test(dataProvider = "write_writeWord")
    public void testPenWrite_writeWord(int inkCV, double sl, String color, String word) {
        pen = new Pen(inkCV, sl,color);
        assertEquals("Success", word, pen.write(word));
    }

    @DataProvider(name = "write_writePartOfWord")
    public Object[][] provideWrite_writePartOfWord() {
        return new Object[][] {
                {3, 1, "RED","word", "wor"},
                {1,3,"RED", "can","c"},
                {2, 2,"BLUE","card","ca"}
        };
    }

    @Test(dataProvider = "write_writePartOfWord")
    public void testPenWrite_writePartOfWord(int inkCV, double sl, String color, String word, String res) {
        pen = new Pen(inkCV, sl,color);
        assertEquals("Success", res, pen.write(word));
    }
    @DataProvider(name = "write_penNotWorking")
    public Object[][] provideWrite_penNotWorking() {
        return new Object[][] {
                {-2, 1, "RED","word"},
                {-6,3,"RED", "can"},
                {0, 2,"BLUE","card"}
        };
    }

    @Test(dataProvider = "write_penNotWorking")
    public void testPenWrite_penNotWorking(int inkCV, double sl, String color, String word) {
        pen = new Pen(inkCV, sl,color);
        assertEquals("Success", "", pen.write(word));
    }

    @DataProvider(name = "write_NullBehaviour")
    public Object[][] provideWrite_NullBehaviour() {
        return new Object[][] {
                {1, 1, null, "can"},
                {2,3,"RED", null},
                {-2, 2,null, null}
        };
    }
    @Test(dataProvider = "_NullBehaviour", expectedExceptions = NullPointerException.class)
    public void testPenWrite_NullBehaviour(int inkCV, double sl, String color, String word) throws Exception{
        pen = new Pen(inkCV, sl,color);
        pen.write(word);
    }
    //getColor
    @DataProvider(name = "getColor_retColor")
    public Object[][] provideGetColor_retColor() {
        return new Object[][] {
                {1, 1, "RED"},
                {2,3,"RED"},
                {-2, 2,"BLUE"}
        };
    }

    @Test(dataProvider = "getColor_retColor")
    public void testPenGetColor_retColor(int inkCV, double sl, String color) {
        pen = new Pen(inkCV, sl,color);
        assertEquals("Success", color, pen.getColor());
    }
    @DataProvider(name = "_NullBehaviour")
    public Object[][] provide_NullBehaviour() {
        return new Object[][] {
                {1, 1, null},
                {2,3,null},
                {-2, 2,null}
        };
    }
    @Test(dataProvider = "_NullBehaviour", expectedExceptions = NullPointerException.class)
    public void testPenGetColor_nullBehaviour(int inkCV, double sl, String color) throws Exception{
        pen = new Pen(inkCV, sl,color);
        pen.doSomethingElse();
    }

    //doSmthElse
    @DataProvider(name = "doSmthElse_printColor")
    public Object[][] provideDoSmthElse_printColor() {
        return new Object[][] {
                {1, 1, "RED"},
                {2,3,"RED"},
                {-2, 2,"BLUE"}
        };
    }

    @BeforeMethod(groups = "outPut")
    public void setUpStreams(){
        System.setOut(new PrintStream(outContent));
    }
    @AfterMethod(groups = "outPut")
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    @Test(dataProvider = "doSmthElse_printColor",groups = "outPut")
    public void testPenDoSmthElse_printColor(int inkCV, double sl, String color) {
        System.setOut(new PrintStream(outContent));
        pen = new Pen(inkCV, sl,color);
        pen.doSomethingElse();
        assertEquals("Success", color, outContent.toString());
    }

    /*@DataProvider(name = "DoSmthElse_NullBehaviour")
    public Object[][] provideDoSmthElse_NullBehaviour() {
        return new Object[][] {
                {1, 1, null},
                {2,3,null},
                {-2, 2,null}
        };
    }*/
    @Test(dataProvider = "_NullBehaviour", expectedExceptions = NullPointerException.class)
    public void testPenDoSmthElse_nullBehaviour(int inkCV, double sl, String color) throws Exception{
        pen = new Pen(inkCV, sl,color);
        pen.doSomethingElse();
    }



    //isWork
    @DataProvider(name = "isWork_checkInk")
    public Object[][] provideIsWork_checkInk() {
        return new Object[][] {
                {1, true},
                {2,true},
                {-2, false}
        };
    }

    @Test(dataProvider = "isWork_checkInk")
    public void testPenIsWork_checkInk(int inkCV, boolean res) {
        pen = new Pen(inkCV);
        assertEquals("Success", res, (boolean)pen.isWork());
    }
    /*@Test(expectedExceptions = NullPointerException.class)
    public void testPenIsWork_nullBehaviour(int inkCV) throws Exception{
        pen = new Pen(null);
        pen.isWork();
    }*/


}
